------------------------------------------------------------------------------
     $Id$
     
     Copyright (2008) Sandia Corporation. Under the terms of
     Contract DE-AC04-94AL85000 with Sandia Corporation, the U.S.
     Government retains certain rights in this software.
     
     Hermes is free software: you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as
     published by the Free Software Foundation, either version 3 of
     the License, or (at your option) any later version.
     
     Hermes is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
     
     You should have received a copy of the GNU Lesser General
     Public License along with Hermes.  If not, see
     <http://www.gnu.org/licenses/>.
     
     C_Groups @(#)
------------------------------------------------------------------------------

Overview

  TREAD and TWRITE test the PFF read and write routines. They can also
  be used to determine the value of the end-of-file parameter 
  EOFSTA that should be used in the subroutine PFMIO.

  TFLOAT checks to make sure a specific machine's floating point
  limits are properly handled, so that PFUF2I and PFUI2F will not
  produce floating point exceptions or otherwise fail to function
  properly. Critical parameters (PF2MIN and PF2MAX) determine the
  minimum and maximum power-of-two exponent for single precision
  floating point numbers on a specific machine. PFRMIN returns the
  minimum normalized floating-point number that can be represented,
  and whose inverse will not overflow. PFRMAX returns the maximum
  normalized floating-point number that can be represented. With the
  adoption of the IEEE 754 single-precision binary floating-point
  format on most hardware, this test is very unlikely to fail.

  TFLUSH helps determine if the machine-dependent output buffer flush
  routine (pfmflu) is working properly.

  TDOUBLE tests that the encoding/decoding of double precision values
  to/from 5 16-bit ints is working correctly

TWRITE
------
  Run make with the command line "make". Some changes to the
  Makefile may be required on a new machine or with a newer version of
  an operating system.

  Now run TWRITE. Enter the file name "twrite.pff" and TWRITE will create a
  binary file "twrite.pff" that should be identical to the supplied file
  "test.pff". 

  If there are differences, there are two likely causes. If the files
  are the same length, the probable cause is that the BYTE_SWAP macro is
  being improperly set in pfmio.F. If the files are not the same length,
  the probable cause is that the PBPRU parameter is does not have the
  proper value in pfmopn.F. The first 2 records written test the 4-byte
  integer option. The next 2 records written test the full-precision
  (IEEE 32-bit) floating point option. Error #2 from mi4 or mf4 probably
  indicates that the option is not yet implemented on this machine. If
  this is the case, you must either implement pfmf4.F for this machine,
  or comment out the code in tread and twrite that tests this option
  (delineated by "start TEST of FULL-PRECISION MD code" and "end TEST of
  FULL-PRECISION MD code").
  
  Example:

  sahp058% twrite
   File to write
  twrite.pff
  sahp058% cmp twrite.pff test.pff
  sahp058%

  >>> no differences

TREAD
-----
  Now run TREAD. Enter the file name "twrite.pff". TREAD reads and
  prints the 1st word from each of the 14 records in the file. These
  words should be the same. The first 2 records test the 4-byte integer
  option. The next 2 records test the full-precision (IEEE 32-bit)
  floating point option. Errors here are probably the result of the
  BYTE_SWAP macro being improperly defined. After reading all 14
  records, the module pfmio attempts to handle the attempt to read
  beyond the end-of-file. If this is done successfully, pfmio will
  return a (-1) error status.

  If any other error status is returned, you need to determine the
  proper error status returned by your system.  A simple way to do that
  is to concatenate the files tread.f and ../pfmio.F into the file
  txread.F.  Then insert the line 

           print*, 'EOFSTA = ',ierr, '  ???'

  after statement #10 in subroutine PFMIO.  Now "make txread" and run
  it.  The value printed for EOFSTA is the value that the parameter
  EOFSTA in module pfmio must be set to.

  Example:

  sahp058% tread
   File to read
  twrite.pff
       1       1          32257          32257      7E01      7E01
       2    1025          65025          65025      FE01      FE01
       3       1 0.10000000E+01 0.10000000E+01  3F800000  3F800000
       4    1025 0.97560976E-03 0.97560976E-03  3A7FC010  3A7FC010
       5       1       1
       6    2049    2049
       7    4097    4097
       8    6145    6145
       9    8193    8193
      10   10241   10241
      11   12289   12289
      12   14337   14337
      13   16385   16385
      14   18433   18433
  mio error =    -1  irec =    15

  >>> EOFSTA has the correct value

TFLOAT
------
  Run TFLOAT. For all hardware/compiler configurations of which we are
  aware, the test should pass, and produce output similar to:

  $ tfloat
   Current Float Limits:
     MAX_EXP:          127
     MIN_EXP:         -125
    FLT_MIN:  1.17549435E-38  0x00800000
    FLT_MAX:  3.40282347E+38  0x7F7FFFFF
   TFLOAT PASSED

  There are two ways that we anticipate that TFLOAT might fail. It
  could run successfully to completion, but print a failure message,
  Alternatively, it could produce a floating-point exception and
  crash. In either case, there is currently not a machine-dependent
  parameter that can be set to fix this problem (since there has never
  been a need for one). However, if you should encounter a failure
  while attempting to port this to a new environment, you will need to
  email a description of your problem along with information about
  your hardware/OS/compiler environment to the project administrators
  (go to http://www.sourceforge.net/projects/hermes-util/support), and
  we will provide a solution for you. You should also include any
  output you get from running the test. In addition, for the case of a
  floating-point exception failure, you will need to also do some
  further tests (described below) and send the output of those tests
  to us as well.

  If a file named CHG_TFLOAT_MAX exists in the directory where you run
  TFLOAT, it changes the behavior of the program. (Note that on
  unix/linux systems, you can simply "touch CHG_TFLOAT_MAX" to invoke
  this change.) In this altered mode, you will be prompted to change
  the value of the MAX_EXP parameter. Begin by setting it to be one
  less that its current value. If this runs to completion (PASS or
  FAIL), you are done. If still crashes due to a floating-point
  exception, iteratively repeat the test with successively smaller
  values of MAX_EXP until the the test does run to completion. Then
  send us the output from these test runs along with the information
  requested in the preceding paragraph.

TFLUSH
------
  Run TFLUSH. This routine writes out consecutive 4096-byte blocks to an 
  output file.  For each block, it pauses twice, once after writing the block, 
  and once after calling pfmflu to flush the system output buffer.  After the
  message "Writing buffer 1" the file may or may not actually contain 4096 
  bytes, depending upon the operating system's policy for buffer flushing. 
  However, after the message "Calling PFMFLU", the file should contain 4096 
  bytes if pfmflu is functioning properly.  Note that the code is restarted
  after each pause by entering a carriage return, and the program will exit
  if "q" is entered in response to the "Calling PFMFLU" message.  This test 
  is most useful if run simultaneously with another process that can monitor
  the file size thoughout the course of the test.

  Example:

  sahp058% tflush
   File to write 
  tflush.pff
   Writing buffer  1
                                <--------  File may contain 4096 bytes.
   Calling PFMFLU
                                <--------  File should contain 4096 bytes.
   Writing buffer  2
                                <--------  File may contain 8192 bytes.
   Calling PFMFLU
                                <--------  File should contain 8192 bytes.
   Writing buffer  3
                                <--------  File may contain 12288 bytes.
   Calling PFMFLU
  q                             <--------  File should contain 12288 bytes.


TDOUBLE
-------
  Run TDOUBLE. This routine loops over some powers of pi, and:
     * executes pfud2i and prints out the 5 16-bit unsigned ints
     * executes pfui2d to convert back to a new double
     * prints out the original and new doubles, and the relative
       error of the new value
  The exact value of the relative error is platform-specific.
  However, if working correctly, the magnitude should be < 1e-14
  This is the output using the Intel compiler, version 11.1,
  on a Linux system:

0  18703  27985   2138   6144  16388
0   3.141592653590E+00
    3.141592653590E+00     0.000E+00
0   8953  16823   5009    768  16383
0  -3.183098861838E-01
   -3.183098861838E-01     0.000E+00
1  26850   6509  30039  11264  16414
1   2.980909933345E+04
    2.980909933345E+04     1.110E-15
1   3252  19859   8890  29696  16357
1  -3.354680357209E-05
   -3.354680357209E-05    -1.110E-15
2  11593  12007   7482  30976  16798
2   1.392304051057E+62
    1.392304051057E+62     6.217E-15
2  15640  28528  12932  13568  15973
2  -7.182339225692E-63
   -7.182339225692E-63    -6.217E-15
